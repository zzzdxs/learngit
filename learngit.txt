创建空目录                                mkdir <listname>
进入目录                                  cd <listname>
退回上级目录                              cd ../
显示当前目录                              pwd
显示当前目录内容                           ls
仓库初始化                                git init
添加文件到缓存区                          git add <filename>
提交所有更改                              git commit -m "explanation"
查看仓库当前状态                          git status
查看文件修改情况                          git diff <filename>
查看历史记录commit id                     git log
查看历史记录简化版                         git log --pretty=oneline
回退上个版本                              git reset --hard HEAD^
回退指定版本                              git reset --hard <commit id>  （已commit再修改）
查看历史命令                              git reflog
撤销工作区修改                            git checkout -- <filename>  （前提是提交过版本库commit过）
撤销提交暂存区                            git reset HEAD <filename>
删除本地文件                              rm <filename>
提交删除操作至缓存区                       git rm <filename>      (之后需要commit)

--远程仓库--
创建SSH key                              ssh-keygen -t rsa -C "youremail@example.com"
GitHub添加SSH key                       （网页）
GitHub创建repository                    （网页）
本地仓库关联GitHub                        git remote add origin <SSH name> （origin是对远程库习惯命名）
本地更新推送GitHub                        git push -u origin master （第一次推送加-u参数，之后不用）
查看远程库信息                            git remote -v
解绑本地远程                              git remote rm <name>  （物理删除需网页上删除）
从远程库克隆                              git clone <SSH name>

--分支管理--
新建分支                                  git branch <name>
切换分支                                  git checkout <name>  /  git switch <name>
新建并切换分支                             git checkout -b <name>   /   git switch -c <name> 
查看当前分支                               git branch
新分支修改结果在合并前不影响master旧分支，即切换回旧分支再查看文件内容不变。
将<name>分支成果合并至当前分支              git merge <name>
删除分支                                  git branch -d <name>
两个分支同时修改时出现冲突后直接在文件统一修改解决冲突并提交
查看分支合并图(带参数)                     git log --graph --pretty=oneline --abbrev-commit

Fast forward模式删除分支后会丢掉分支信息，采用/git merge --no-ff -m "merge with no-ff" dev/禁用Fast forward，使用/git log --graph --pretty=oneline --abbrev-commit/查看分支历史可以看到合并痕迹。

在dev工作时临时修复master上的bug：
暂存工作现场                              git stash
切换至bug分支                             git checkout master
创建临时修复分支                          git checkout -b issue
修改文件后提交（add commit）
切换到master合并并删除issue      git checkout master \ git merge --no-ff -m "merged bug fix" issue
回到dev继续工作                           git switch dev
查看工作现场                              git stash list
恢复工作现场但不删除stash                  git stash apply
删除stash                                git stash drop
恢复工作现场并删除stash                   git stash pop
多次stash后恢复指定stash                  git stash apply stash@{?}
同时master上该bug修改了而由master分出的dev上bug还未修改：
（git branch:* dev）
将之前修改bug的提交复制到dev：             git cherry-pick <commit ID>

开发新功能最好新建feature分支
强行删除未合并过的分支                     git branch -D <name>
查看远程库                                git remote
查看远程库详细信息                         git remote -v

多人协作：
远程clone默认master分支
Dell@DESKTOP-UGLUL9N MINGW64 /d/learngit/learngit (master)
$ ls
LICENSE.txt  learngit.txt  readme.txt  test.txt

Dell@DESKTOP-UGLUL9N MINGW64 /d/learngit/learngit (master)
$ git checkout -b dev origin/dev        #git checkout -b branch-name origin/branch-name
Switched to a new branch 'dev'
branch 'dev' set up to track 'origin/dev'.

Dell@DESKTOP-UGLUL9N MINGW64 /d/learngit/learngit (dev)
$ ls
LICENSE.txt  env.txt  learngit.txt  readme.txt  test.txt
由此切换到dev分支并在此基础上进行开发和提交
若同时对dev分支做修改后“我”再次提交修改，则会产生冲突而推送push失败:
指定本地dev和远程origin/dev分支的连接            git branch --set-upstream-to=origin/dev dev
抓取最新提交                                                    git pull
手动解决冲突（在文件中修改）再add commit push
**一般多人协作，master主分支用于大版本更新必须远程同步；dev开发分支，团队成员在上面工作远程同步；bug分支用于本地修复；feature分支更多是实验代码。
删除远程分支                          git push origin --delete <branchname>
清除本地无效分支                       git fetch -p
**不太会的分支整理为直线                git rebase [把本地未push的分叉提交历史整理为直线，需三方对比]

--标签管理--
默认给当前分支最新一次commit打tag       git tag <tag name>
查看历史记录给指定commit打tag           git tag <tag name> <commit id>
查看标签                              git tag        （标签按字母排序而不是时间）
创建标签 -a指定tag名 -m指定说明文字          git tag -a <tag name> -m "explanation" <commit id>
查看标签信息                                               git show <tag name>
删除本地标签                                               git tag -d <tag name>
推送标签到远程                                            git push origin <tag name>
一次性推送所有本地标签                               git push origin --tags
删除远程标签（先删除本地标签后）               git push origin :refs/tags/<tag name>  (登录GitHub查看是否删除）

在GitHub上fork开源仓库；
pull request向其他人的仓库贡献代码

文件名标色                                                 git config --global color.ui true
自动忽略文件          需要向版本库push/.gitignore/文件（文件名就是.gitignore）     参考https://github.com/github/gitignore
可以通过https://gitignore.itranswarp.com在线生成.gitignore文件。
忽略文件的原则是：
1.忽略操作系统自动生成的文件，比如缩略图等；
2.忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
3.忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。
强制添加已忽略文件           git add -f <name> 
查看.gitignore哪里有问题   git check-ignore -v <ignored name>  （会显示第几行忽略了该文件）
.gitignore文件里不忽略    !<name>
配置别名                                                    git config --global alias.<new name> <original name>
--global 全局参数 不加即仅对当前仓库起作用
每个仓库的Git配置文件都放在.git/config文件（local）、c:/users/dell/.gitconfig（global）中


